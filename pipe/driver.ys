#######################################################################
# Test for copying block of size K;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $K, %rdx		# src and dst have K elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#name:Wangy Yuhao
#ID:2200017794
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	andq %rdx,%rdx		# len <= 0?
	jle Done		# if so, goto Done:
Loop:
	iaddq -10,%rdx		# %rdx-6<0?
	jl pre_rest 		# if so,go to rest
	mrmovq (%rdi), %r8	# read val from src... bubble
	mrmovq 8(%rdi), %r9	# read val from src... bubble
	mrmovq 16(%rdi), %r10	# read val from src... bubble
	mrmovq 24(%rdi), %r11	# read val from src... bubble
	mrmovq 32(%rdi), %r12	# read val from src... bubble
	mrmovq 40(%rdi), %r13	# read val from src... bubble
	mrmovq 48(%rdi), %r14	# read val from src... bubble
	mrmovq 56(%rdi), %rcx	# read val from src... bubble
	mrmovq 64(%rdi), %rbp	# read val from src... bubble
	mrmovq 72(%rdi), %rbx	# read val from src... bubble
	rmmovq %r8, (%rsi)		# ...and store it to dst
	rmmovq %r9,  8(%rsi)	# ...and store it to dst
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	rmmovq %r11,  24(%rsi)	# ...and store it to dst
	rmmovq %r12, 32(%rsi)	# ...and store it to dst
	rmmovq %r13,  40(%rsi)	# ...and store it to dst
	rmmovq %r14,  48(%rsi)	# ...and store it to dst
	rmmovq %rcx,  56(%rsi)	# ...and store it to dst
	rmmovq %rbp,  64(%rsi)	# ...and store it to dst
	rmmovq %rbx,  72(%rsi)	# ...and store it to dst
Npos0:
	andq %r8, %r8		# val1 <= 0?
	jle Npos1		# if so, goto Npos:
	iaddq 1, %rax		# else count++
Npos1:	
	andq %r9, %r9		# val2 <= 0?
	jle Npos2			# if so, goto Npos:
	iaddq 1, %rax		# else count++
Npos2:	
	andq %r10, %r10		# val3 <= 0?
	jle Npos3			# if so, goto Npos:
	iaddq 1, %rax		# else count++
Npos3:	
	andq %r11, %r11		# val4 <= 0?
	jle Npos4			# if so, goto Npos:
	iaddq 1, %rax		# else count++
Npos4:	
	andq %r12, %r12	# val5 <= 0?
	jle Npos5		# if so, goto Npos:
	iaddq 1, %rax		# else count++
Npos5:	
	andq %r13, %r13	# val6 <= 0?
	jle Npos6
	iaddq 1, %rax		# else count++
Npos6:	
	andq %rcx, %rcx	# val6 <= 0?
	jle Npos7
	iaddq 1, %rax		# else count++
Npos7:	
	andq %rbp, %rbp	# val6 <= 0?
	jle Npos8
	iaddq 1, %rax		# else count++
Npos8:	
	andq %rbx, %rbx	# val6 <= 0?
	jle Npos9
	iaddq 1, %rax		# else count++
Npos9:
	andq %r14, %r14	# val6 <= 0?
	jle loop_end
	iaddq 1, %rax		# else count++

loop_end:
	iaddq 80, %rdi		# src+=6
	iaddq 80, %rsi		# dst+=6
	andq %rdx,%rdx		# len > 0?
	jg Loop			# if so, goto Loop:
	ret  			#else return

pre_rest:
	iaddq	$5,%rdx		# len <4
	jl	Left       #<4
	jg	Right	   #>4
	je	remain5		# len == 5 Middle
	
Left:  #<5
	iaddq	$4,%rdx	# len == 1
	je	remain1
	iaddq	$-1,%rdx		# len == 2
	je	remain2
	iaddq	$-1,%rdx	# len == 3
	je	remain3
	iaddq	$-1,%rdx	# len == 3
	je	remain4
Right:#>5
	iaddq	$-1,%rdx	# len <= 6 
	je	remain6		# len == 5
	iaddq	$-1,%rdx		# RightLeft
	je	remain7	# len == 6
	iaddq	$-1,%rdx		# RightLeft
	je	remain8		# len == 7
	iaddq	$-1,%rdx		# RightLeft
	je	remain9		# len == 8

remain9:
	mrmovq 64(%rdi), %r8
	andq %r8,%r8
	rmmovq %r8,64(%rsi)
	jle remain8
	iaddq 1, %rax
remain8:
	mrmovq 56(%rdi), %r8
	andq %r8,%r8
	rmmovq %r8,56(%rsi)
	jle remain7
	iaddq 1, %rax
remain7:
	mrmovq 48(%rdi), %r8
	andq %r8,%r8
	rmmovq %r8,48(%rsi)
	jle remain6
	iaddq 1, %rax
remain6:
	mrmovq 40(%rdi), %r8
	andq %r8,%r8
	rmmovq %r8,40(%rsi)
	jle remain5
	iaddq 1, %rax
remain5:
	mrmovq 32(%rdi), %r8
	andq %r8,%r8
	rmmovq %r8,32(%rsi)
	jle remain4
	iaddq 1, %rax
remain4:
	mrmovq 24(%rdi), %r8
	andq %r8,%r8
	rmmovq %r8,24(%rsi)
	jle remain3
	iaddq 1, %rax
remain3:
	mrmovq 16(%rdi), %r8
	andq %r8,%r8
	rmmovq %r8,16(%rsi)
	jle remain2
	iaddq 1, %rax
remain2:
	mrmovq 8(%rdi), %r8
	andq %r8,%r8
	rmmovq %r8,8(%rsi)
	jle remain1
	iaddq 1, %rax
remain1:
	mrmovq (%rdi), %r8
	andq %r8,%r8
	rmmovq %r8,(%rsi)
	jle Done
	iaddq 1, %rax


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 0.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $0,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $K,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
