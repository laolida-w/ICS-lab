                            | #######################################################################
                            | # Test for copying block of size K;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f45006000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f2ffffffffffffffff | 	irmovq $K, %rdx		# src and dst have K elements
0x014: 30f6c805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7b005000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 804204000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #name:Wangy Yuhao
                            | #ID:2200017794
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x03d: 714104000000000000   | 	jle Done		# if so, goto Done:
0x046:                      | Loop:
0x046: c0f2f6ffffffffffffff | 	iaddq -10,%rdx		# %rdx-6<0?
0x050: 721302000000000000   | 	jl pre_rest 		# if so,go to rest
0x059: 50870000000000000000 | 	mrmovq (%rdi), %r8	# read val from src... bubble
0x063: 50970800000000000000 | 	mrmovq 8(%rdi), %r9	# read val from src... bubble
0x06d: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src... bubble
0x077: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src... bubble
0x081: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12	# read val from src... bubble
0x08b: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13	# read val from src... bubble
0x095: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14	# read val from src... bubble
0x09f: 50173800000000000000 | 	mrmovq 56(%rdi), %rcx	# read val from src... bubble
0x0a9: 50574000000000000000 | 	mrmovq 64(%rdi), %rbp	# read val from src... bubble
0x0b3: 50374800000000000000 | 	mrmovq 72(%rdi), %rbx	# read val from src... bubble
0x0bd: 40860000000000000000 | 	rmmovq %r8, (%rsi)		# ...and store it to dst
0x0c7: 40960800000000000000 | 	rmmovq %r9,  8(%rsi)	# ...and store it to dst
0x0d1: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0db: 40b61800000000000000 | 	rmmovq %r11,  24(%rsi)	# ...and store it to dst
0x0e5: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)	# ...and store it to dst
0x0ef: 40d62800000000000000 | 	rmmovq %r13,  40(%rsi)	# ...and store it to dst
0x0f9: 40e63000000000000000 | 	rmmovq %r14,  48(%rsi)	# ...and store it to dst
0x103: 40163800000000000000 | 	rmmovq %rcx,  56(%rsi)	# ...and store it to dst
0x10d: 40564000000000000000 | 	rmmovq %rbp,  64(%rsi)	# ...and store it to dst
0x117: 40364800000000000000 | 	rmmovq %rbx,  72(%rsi)	# ...and store it to dst
0x121:                      | Npos0:
0x121: 6288                 | 	andq %r8, %r8		# val1 <= 0?
0x123: 713601000000000000   | 	jle Npos1		# if so, goto Npos:
0x12c: c0f00100000000000000 | 	iaddq 1, %rax		# else count++
0x136:                      | Npos1:	
0x136: 6299                 | 	andq %r9, %r9		# val2 <= 0?
0x138: 714b01000000000000   | 	jle Npos2			# if so, goto Npos:
0x141: c0f00100000000000000 | 	iaddq 1, %rax		# else count++
0x14b:                      | Npos2:	
0x14b: 62aa                 | 	andq %r10, %r10		# val3 <= 0?
0x14d: 716001000000000000   | 	jle Npos3			# if so, goto Npos:
0x156: c0f00100000000000000 | 	iaddq 1, %rax		# else count++
0x160:                      | Npos3:	
0x160: 62bb                 | 	andq %r11, %r11		# val4 <= 0?
0x162: 717501000000000000   | 	jle Npos4			# if so, goto Npos:
0x16b: c0f00100000000000000 | 	iaddq 1, %rax		# else count++
0x175:                      | Npos4:	
0x175: 62cc                 | 	andq %r12, %r12	# val5 <= 0?
0x177: 718a01000000000000   | 	jle Npos5		# if so, goto Npos:
0x180: c0f00100000000000000 | 	iaddq 1, %rax		# else count++
0x18a:                      | Npos5:	
0x18a: 62dd                 | 	andq %r13, %r13	# val6 <= 0?
0x18c: 719f01000000000000   | 	jle Npos6
0x195: c0f00100000000000000 | 	iaddq 1, %rax		# else count++
0x19f:                      | Npos6:	
0x19f: 6211                 | 	andq %rcx, %rcx	# val6 <= 0?
0x1a1: 71b401000000000000   | 	jle Npos7
0x1aa: c0f00100000000000000 | 	iaddq 1, %rax		# else count++
0x1b4:                      | Npos7:	
0x1b4: 6255                 | 	andq %rbp, %rbp	# val6 <= 0?
0x1b6: 71c901000000000000   | 	jle Npos8
0x1bf: c0f00100000000000000 | 	iaddq 1, %rax		# else count++
0x1c9:                      | Npos8:	
0x1c9: 6233                 | 	andq %rbx, %rbx	# val6 <= 0?
0x1cb: 71de01000000000000   | 	jle Npos9
0x1d4: c0f00100000000000000 | 	iaddq 1, %rax		# else count++
0x1de:                      | Npos9:
0x1de: 62ee                 | 	andq %r14, %r14	# val6 <= 0?
0x1e0: 71f301000000000000   | 	jle loop_end
0x1e9: c0f00100000000000000 | 	iaddq 1, %rax		# else count++
                            | 
0x1f3:                      | loop_end:
0x1f3: c0f75000000000000000 | 	iaddq 80, %rdi		# src+=6
0x1fd: c0f65000000000000000 | 	iaddq 80, %rsi		# dst+=6
0x207: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x209: 764600000000000000   | 	jg Loop			# if so, goto Loop:
0x212: 90                   | 	ret  			#else return
                            | 
0x213:                      | pre_rest:
0x213: c0f20500000000000000 | 	iaddq	$5,%rdx		# len <4
0x21d: 723802000000000000   | 	jl	Left       #<4
0x226: 768402000000000000   | 	jg	Right	   #>4
0x22f: 737403000000000000   | 	je	remain5		# len == 5 Middle
                            | 	
0x238:                      | Left:  #<5
0x238: c0f20400000000000000 | 	iaddq	$4,%rdx	# len == 1
0x242: 731804000000000000   | 	je	remain1
0x24b: c0f2ffffffffffffffff | 	iaddq	$-1,%rdx		# len == 2
0x255: 73ef03000000000000   | 	je	remain2
0x25e: c0f2ffffffffffffffff | 	iaddq	$-1,%rdx	# len == 3
0x268: 73c603000000000000   | 	je	remain3
0x271: c0f2ffffffffffffffff | 	iaddq	$-1,%rdx	# len == 3
0x27b: 739d03000000000000   | 	je	remain4
0x284:                      | Right:#>5
0x284: c0f2ffffffffffffffff | 	iaddq	$-1,%rdx	# len <= 6 
0x28e: 734b03000000000000   | 	je	remain6		# len == 5
0x297: c0f2ffffffffffffffff | 	iaddq	$-1,%rdx		# RightLeft
0x2a1: 732203000000000000   | 	je	remain7	# len == 6
0x2aa: c0f2ffffffffffffffff | 	iaddq	$-1,%rdx		# RightLeft
0x2b4: 73f902000000000000   | 	je	remain8		# len == 7
0x2bd: c0f2ffffffffffffffff | 	iaddq	$-1,%rdx		# RightLeft
0x2c7: 73d002000000000000   | 	je	remain9		# len == 8
                            | 
0x2d0:                      | remain9:
0x2d0: 50874000000000000000 | 	mrmovq 64(%rdi), %r8
0x2da: 6288                 | 	andq %r8,%r8
0x2dc: 40864000000000000000 | 	rmmovq %r8,64(%rsi)
0x2e6: 71f902000000000000   | 	jle remain8
0x2ef: c0f00100000000000000 | 	iaddq 1, %rax
0x2f9:                      | remain8:
0x2f9: 50873800000000000000 | 	mrmovq 56(%rdi), %r8
0x303: 6288                 | 	andq %r8,%r8
0x305: 40863800000000000000 | 	rmmovq %r8,56(%rsi)
0x30f: 712203000000000000   | 	jle remain7
0x318: c0f00100000000000000 | 	iaddq 1, %rax
0x322:                      | remain7:
0x322: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x32c: 6288                 | 	andq %r8,%r8
0x32e: 40863000000000000000 | 	rmmovq %r8,48(%rsi)
0x338: 714b03000000000000   | 	jle remain6
0x341: c0f00100000000000000 | 	iaddq 1, %rax
0x34b:                      | remain6:
0x34b: 50872800000000000000 | 	mrmovq 40(%rdi), %r8
0x355: 6288                 | 	andq %r8,%r8
0x357: 40862800000000000000 | 	rmmovq %r8,40(%rsi)
0x361: 717403000000000000   | 	jle remain5
0x36a: c0f00100000000000000 | 	iaddq 1, %rax
0x374:                      | remain5:
0x374: 50872000000000000000 | 	mrmovq 32(%rdi), %r8
0x37e: 6288                 | 	andq %r8,%r8
0x380: 40862000000000000000 | 	rmmovq %r8,32(%rsi)
0x38a: 719d03000000000000   | 	jle remain4
0x393: c0f00100000000000000 | 	iaddq 1, %rax
0x39d:                      | remain4:
0x39d: 50871800000000000000 | 	mrmovq 24(%rdi), %r8
0x3a7: 6288                 | 	andq %r8,%r8
0x3a9: 40861800000000000000 | 	rmmovq %r8,24(%rsi)
0x3b3: 71c603000000000000   | 	jle remain3
0x3bc: c0f00100000000000000 | 	iaddq 1, %rax
0x3c6:                      | remain3:
0x3c6: 50871000000000000000 | 	mrmovq 16(%rdi), %r8
0x3d0: 6288                 | 	andq %r8,%r8
0x3d2: 40861000000000000000 | 	rmmovq %r8,16(%rsi)
0x3dc: 71ef03000000000000   | 	jle remain2
0x3e5: c0f00100000000000000 | 	iaddq 1, %rax
0x3ef:                      | remain2:
0x3ef: 50870800000000000000 | 	mrmovq 8(%rdi), %r8
0x3f9: 6288                 | 	andq %r8,%r8
0x3fb: 40860800000000000000 | 	rmmovq %r8,8(%rsi)
0x405: 711804000000000000   | 	jle remain1
0x40e: c0f00100000000000000 | 	iaddq 1, %rax
0x418:                      | remain1:
0x418: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x422: 6288                 | 	andq %r8,%r8
0x424: 40860000000000000000 | 	rmmovq %r8,(%rsi)
0x42e: 714104000000000000   | 	jle Done
0x437: c0f00100000000000000 | 	iaddq 1, %rax
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x441:                      | Done:
0x441: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x442:                      | End:
                            | #/* $end ncopy-ys */
0x442:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 0.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x442:                      | check:
                            | 	# Return value test
0x442: 30fa0000000000000000 | 	irmovq $0,%r10
0x44c: 61a0                 | 	subq %r10,%rax
0x44e: 736a04000000000000   | 	je checkb
0x457: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x461: 70a805000000000000   | 	jmp cdone
0x46a:                      | checkb:
                            | 	# Code length check
0x46a: 30f04204000000000000 | 	irmovq EndFun,%rax
0x474: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x47e: 6120                 | 	subq %rdx,%rax
0x480: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x48a: 6102                 | 	subq %rax,%rdx
0x48c: 75a804000000000000   | 	jge checkm
0x495: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x49f: 70a805000000000000   | 	jmp cdone
0x4a8:                      | checkm:
0x4a8: 30f2c805000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x4b2: 30f3b005000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x4bc: 30f7ffffffffffffffff | 	irmovq $K,%rdi  # Count
0x4c6: 6277                 | 	andq %rdi,%rdi
0x4c8: 732605000000000000   | 	je checkpre         # Skip check if count = 0
0x4d1:                      | mcloop:
0x4d1: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x4db: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x4e5: 6160                 | 	subq %rsi,%rax
0x4e7: 730305000000000000   | 	je  mok
0x4f0: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x4fa: 70a805000000000000   | 	jmp cdone
0x503:                      | mok:
0x503: 30f00800000000000000 | 	irmovq $8,%rax
0x50d: 6002                 | 	addq %rax,%rdx	  # dest ++
0x50f: 6003                 | 	addq %rax,%rbx    # src++
0x511: 30f00100000000000000 | 	irmovq $1,%rax
0x51b: 6107                 | 	subq %rax,%rdi    # cnt--
0x51d: 76d104000000000000   | 	jg mcloop
0x526:                      | checkpre:
                            | 	# Check for corruption
0x526: 30f2c005000000000000 | 	irmovq Predest,%rdx
0x530: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x53a: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x544: 6120                 | 	subq %rdx,%rax
0x546: 736205000000000000   | 	je checkpost
0x54f: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x559: 70a805000000000000   | 	jmp cdone
0x562:                      | checkpost:
                            | 	# Check for corruption
0x562: 30f2c805000000000000 | 	irmovq Postdest,%rdx
0x56c: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x576: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x580: 6120                 | 	subq %rdx,%rax
0x582: 739e05000000000000   | 	je checkok
0x58b: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x595: 70a805000000000000   | 	jmp cdone
0x59e:                      | checkok:
                            | 	# Successful checks
0x59e: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x5a8:                      | cdone:
0x5a8: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x5b0:                      | 	.align 8
0x5b0:                      | src:
0x5b0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x5c0:                      | 	.align 16
0x5c0:                      | Predest:
0x5c0: fadebc0000000000     | 	.quad 0xbcdefa
0x5c8:                      | dest:
0x5c8:                      | Postdest:
0x5c8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x5d0:                      | .align 8
                            | # Run time stack
0x5d0: 0000000000000000     | 	.quad 0
0x5d8: 0000000000000000     | 	.quad 0
0x5e0: 0000000000000000     | 	.quad 0
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
0x618: 0000000000000000     | 	.quad 0
0x620: 0000000000000000     | 	.quad 0
0x628: 0000000000000000     | 	.quad 0
0x630: 0000000000000000     | 	.quad 0
0x638: 0000000000000000     | 	.quad 0
0x640: 0000000000000000     | 	.quad 0
0x648: 0000000000000000     | 	.quad 0
                            | 
0x650:                      | Stack:
